// client/src/pages/JobsPage.jsx
import React, { useEffect, useMemo, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import CreateJob from '../components/CreateJob';
import { supabase } from '../supabaseClient';

const STATUS_ORDER = [
  'recall',
  '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
  '–≤ —Ä–∞–±–æ—Ç–µ',
  '–∑–∞–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π',
  '–æ–∂–∏–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π',
  '–∫ —Ñ–∏–Ω–∏—à—É',
  '–∑–∞–≤–µ—Ä—à–µ–Ω–æ',
];

export default function JobsPage() {
  const [jobs, setJobs] = useState([]);
  const [clients, setClients] = useState([]);
  const [technicians, setTechnicians] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    fetchAll();
  }, []);

  async function fetchAll() {
    const [
      { data: jobData },
      { data: clientData },
      { data: techData },
    ] = await Promise.all([
      supabase.from('jobs').select('*'),
      supabase.from('clients').select('*'),
      supabase.from('technicians').select('id,name,role').eq('role', 'tech'),
    ]);

    setJobs(jobData || []);
    setClients(clientData || []);
    setTechnicians(techData || []);
  }

  const fmtDate = (iso) => {
    if (!iso) return '‚Äî';
    const d = new Date(iso);
    if (Number.isNaN(d.getTime())) return '‚Äî';
    const p = (n) => String(n).padStart(2, '0');
    return `${d.getFullYear()}-${p(d.getMonth() + 1)}-${p(d.getDate())} ${p(d.getHours())}:${p(
      d.getMinutes()
    )}`;
  };

  // –ü–æ–¥–º–µ—à–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Ç.–ø. –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
  const jobsView = useMemo(() => {
    return (jobs || []).map((j) => {
      const c = clients.find((x) => x.id === j.client_id);
      return {
        ...j,
        client_name: c?.full_name || c?.name || '‚Äî',
        client_phone: c?.phone || '',
        created_at_fmt: fmtDate(j.created_at),
      };
    });
  }, [jobs, clients]);

  // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ —Å—Ç–∞—Ç—É—Å—É (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É) + –Ω–æ–≤–µ–µ —Å–≤–µ—Ä—Ö—É
  const orderMap = useMemo(() => new Map(STATUS_ORDER.map((s, i) => [s, i])), []);
  const sortedJobs = useMemo(() => {
    return [...jobsView].sort((a, b) => {
      const ar = orderMap.has(String(a.status).toLowerCase())
        ? orderMap.get(String(a.status).toLowerCase())
        : 999;
      const br = orderMap.has(String(b.status).toLowerCase())
        ? orderMap.get(String(b.status).toLowerCase())
        : 999;
      if (ar !== br) return ar - br;
      return new Date(b.created_at || 0) - new Date(a.created_at || 0);
    });
  }, [jobsView, orderMap]);

  const openJob = (jobId) => navigate(`/job/${jobId}`);

  return (
    <div className="p-4">
      {/* –°—Ç–∏–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å ¬´–í—Å–µ –∑–∞—è–≤–∫–∏¬ª, –ø–ª—é—Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å–∫—Ä—ã—Ç–∏—è –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ */}
      <style>{`
        .jobs-table { width:100%; table-layout:fixed; border-collapse:collapse; }
        .jobs-table thead th { background:#f3f4f6; font-weight:600; }
        .jobs-table th, .jobs-table td { border:1px solid #e5e7eb; padding:6px 8px; vertical-align:top; }
        .jobs-table .cell-wrap { white-space:normal; word-break:break-word; line-height:1.25; }
        .jobs-table .num-link { color:#2563eb; text-decoration:underline; cursor:pointer; }
        .row-click { cursor:pointer; }
        .row-click:hover { background:#f9fafb; }

        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å:
           - —Å–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö
           - —Å–¥–µ–ª–∞–Ω–æ –∫–ª–∞—Å—Å–∞–º–∏, —á—Ç–æ–±—ã –±—ã–ª–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ –∏ —É–ø—Ä–∞–≤–ª—è–µ–º–æ
        */
        @media (max-width: 1024px) {
          .col-system, .col-date { display:none; }
        }
        @media (max-width: 820px) {
          .col-scf, .col-status { display:none; }
        }
        @media (max-width: 640px) {
          .col-tech { display:none; }
        }
      `}</style>

      {/* —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å */}
      <CreateJob onCreated={fetchAll} />

      <div className="overflow-x-auto" style={{ marginTop: 16 }}>
        <table className="jobs-table">
          <colgroup>
            <col style={{ width: 70 }} />
            <col style={{ width: 220 }} />
            <col style={{ width: 120 }} className="col-system" />
            <col style={{ width: 300 }} />
            <col style={{ width: 90 }} className="col-scf" />
            <col style={{ width: 150 }} className="col-tech" />
            <col style={{ width: 160 }} className="col-date" />
            <col style={{ width: 140 }} className="col-status" />
            <col style={{ width: 120 }} />
          </colgroup>

          <thead>
            <tr>
              <th>Job #</th>
              <th>–ö–ª–∏–µ–Ω—Ç</th>
              <th className="col-system">–°–∏—Å—Ç–µ–º–∞</th>
              <th>–ü—Ä–æ–±–ª–µ–º–∞</th>
              <th className="col-scf">SCF</th>
              <th className="col-tech">–¢–µ—Ö–Ω–∏–∫</th>
              <th className="col-date">–î–∞—Ç–∞</th>
              <th className="col-status">–°—Ç–∞—Ç—É—Å</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>

          <tbody>
            {sortedJobs.map((job) => {
              const tech = technicians.find((t) => String(t.id) === String(job.technician_id));
              return (
                <tr
                  key={job.id}
                  className="row-click"
                  role="button"
                  tabIndex={0}
                  onClick={(e) => {
                    const tag = e.target.tagName;
                    if (!['BUTTON', 'A', 'INPUT', 'SELECT', 'TEXTAREA'].includes(tag)) {
                      openJob(job.id);
                    }
                  }}
                  onKeyDown={(e) => {
                    if (!['INPUT', 'SELECT', 'TEXTAREA'].includes(e.target.tagName)) {
                      if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        openJob(job.id);
                      }
                    }
                  }}
                  title="–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É"
                >
                  <td>
                    <div
                      className="cell-wrap num-link"
                      onClick={(e) => {
                        e.stopPropagation();
                        openJob(job.id);
                      }}
                    >
                      {job.job_number || job.id}
                    </div>
                  </td>

                  <td>
                    <div className="cell-wrap">
                      {job.client_name}
                      {job.client_phone ? ` ‚Äî ${job.client_phone}` : ''}
                    </div>
                  </td>

                  <td className="col-system">
                    <div className="cell-wrap">{job.system_type || '‚Äî'}</div>
                  </td>

                  <td>
                    <div className="cell-wrap">{job.issue || '‚Äî'}</div>
                  </td>

                  <td className="col-scf">
                    <div className="cell-wrap">{job.scf ?? '‚Äî'}</div>
                  </td>

                  <td className="col-tech">
                    <div className="cell-wrap">{tech?.name || '‚Äî'}</div>
                  </td>

                  <td className="col-date">
                    <div className="cell-wrap">{job.created_at_fmt}</div>
                  </td>

                  <td className="col-status">
                    <div className="cell-wrap">{job.status || '‚Äî'}</div>
                  </td>

                  <td>
                    <div style={{ display: 'flex', gap: 6 }}>
                      <button
                        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                        onClick={(e) => {
                          e.stopPropagation();
                          openJob(job.id);
                        }}
                      >
                        ‚úèÔ∏è
                      </button>
                      <button
                        title="–ò–Ω–≤–æ–π—Å"
                        onClick={(e) => {
                          e.stopPropagation();
                          navigate(`/invoice/${job.id}`);
                        }}
                      >
                        üìÑ
                      </button>
                    </div>
                  </td>
                </tr>
              );
            })}

            {sortedJobs.length === 0 && (
              <tr>
                <td colSpan={9} style={{ padding: 10 }}>
                  –ù–µ—Ç –∑–∞—è–≤–æ–∫
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
