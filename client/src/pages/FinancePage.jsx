// client/src/pages/FinancePage.jsx
import React, { useEffect, useMemo, useState } from 'react';
import { supabase } from '../supabaseClient';
import * as XLSX from 'xlsx';
import dayjs from 'dayjs';

const FinancePage = () => {
  const [jobs, setJobs] = useState([]);
  const [technicians, setTechnicians] = useState([]);
  const [materialsSum, setMaterialsSum] = useState({}); // job_id -> sum(price*quantity)

  const [filterTech, setFilterTech] = useState('all'); // —Å—Ç—Ä–æ–∫–∞
  const [filterPeriod, setFilterPeriod] = useState('month');

  // ----- —Å—Ç–∏–ª–∏ –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∏—Ä–∏–Ω—ã -----
  const COL = {
    JOB: 80,
    TECH: 220,
    SCF: 90,
    LABOR: 110,
    MATERIALS: 110,
    TOTAL: 120,
    SALARY: 160,
    PAID: 110,
    ACTION: 170,
  };
  const TABLE_WIDTH =
    COL.JOB +
    COL.TECH +
    COL.SCF +
    COL.LABOR +
    COL.MATERIALS +
    COL.TOTAL +
    COL.SALARY +
    COL.PAID +
    COL.ACTION;

  const tableStyle = {
    tableLayout: 'fixed',
    borderCollapse: 'collapse',
    width: `${TABLE_WIDTH}px`,
  };
  const thStyle = (w, align = 'left') => ({
    width: w,
    border: '1px solid #ccc',
    padding: '6px 8px',
    textAlign: align,
    background: '#f5f5f5',
    fontWeight: 600,
  });
  const tdStyle = (w, align = 'left') => ({
    width: w,
    border: '1px solid #ccc',
    padding: '6px 8px',
    textAlign: align,
    verticalAlign: 'top',
    whiteSpace: 'normal',
    wordBreak: 'break-word',
  });
  const selectStyle = { width: '100%', padding: '6px 8px' };
  const btn = { padding: '8px 12px', cursor: 'pointer', borderRadius: 6, border: 'none' };

  const periodOptions = [
    { label: '–°–µ–≥–æ–¥–Ω—è', value: 'day' },
    { label: '–ù–µ–¥–µ–ª—è', value: 'week' },
    { label: '–ú–µ—Å—è—Ü', value: 'month' },
    { label: '–í—Å–µ', value: 'all' },
  ];

  // ===== –ó–∞–≥—Ä—É–∑–∫–∞ =====
  useEffect(() => {
    fetchAll();
  }, []);

  const fetchAll = async () => {
    await Promise.all([fetchJobs(), fetchTechnicians(), fetchMaterialsSum()]);
  };

  const fetchJobs = async () => {
    const { data, error } = await supabase.from('jobs').select('*');
    if (error) console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
    else setJobs(data || []);
  };

  const fetchTechnicians = async () => {
    const { data, error } = await supabase.from('technicians').select('*');
    if (error) console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Ö–Ω–∏–∫–æ–≤:', error);
    else setTechnicians(data || []);
  };

  // –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –¥–µ—Ç–∞–ª–µ–π –ø–æ –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–µ: sum(price * quantity)
  const fetchMaterialsSum = async () => {
    const { data, error } = await supabase
      .from('materials')
      .select('job_id, price, quantity');

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
      setMaterialsSum({});
      return;
    }

    const acc = {};
    (data || []).forEach((m) => {
      const jid = m.job_id;
      const price = Number(m.price || 0);
      const qty = Number(m.quantity || 0);
      const total = price * qty;
      acc[jid] = (acc[jid] || 0) + total;
    });
    setMaterialsSum(acc);
  };

  // ===== –£—Ç–∏–ª–∏—Ç—ã =====
  const getTechnicianName = (id) => {
    const tech = technicians.find((t) => String(t.id) === String(id));
    return tech ? tech.name : '‚Äî';
  };

  const formatMoney = (n) =>
    `$${(Number.isFinite(Number(n)) ? Number(n) : 0).toFixed(2)}`;

  const now = dayjs();

  const inPeriod = (createdAt) => {
    if (!createdAt) return filterPeriod === 'all';
    const created = dayjs(createdAt);
    if (!created.isValid()) return filterPeriod === 'all';
    if (filterPeriod === 'all') return true;
    if (filterPeriod === 'day') return created.isAfter(now.subtract(1, 'day'));
    if (filterPeriod === 'week') return created.isAfter(now.subtract(7, 'day'));
    if (filterPeriod === 'month') return created.isAfter(now.subtract(1, 'month'));
    return true;
  };

  // ===== –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è =====
  const filteredJobs = useMemo(() => {
    return jobs.filter((job) => {
      const matchTech = filterTech === 'all' || String(job.technician_id) === String(filterTech);
      const matchPeriod = inPeriod(job.created_at);
      return matchTech && matchPeriod;
    });
  }, [jobs, filterTech, filterPeriod]);

  // ===== –†–∞—Å—á—ë—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–µ =====
  const calcRow = (j) => {
    const scf = Number(j.scf || 0);
    const labor = Number(j.labor_price || 0);
    const materials = Number(materialsSum[j.id] || 0);
    const total = scf + labor;
    const salary = labor * 0.5 + 50 - materials; // –ù–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞
    return { scf, labor, materials, total, salary };
  };

  // ===== –î–µ–Ω—å–≥–∏ –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã (SCF + –†–∞–±–æ—Ç–∞) =====
  const moneyReport = useMemo(() => {
    const buckets = {
      '–ù–∞–ª–∏—á–Ω—ã–µ': 0,
      'Zelle': 0,
      '–ß–µ–∫': 0,
      '–ö–∞—Ä—Ç–∞': 0,
      '–î—Ä—É–≥–æ–µ': 0,
    };

    filteredJobs.forEach((j) => {
      // SCF
      const scf = Number(j.scf || 0);
      const scfMethod = (j.scf_payment_method || '').trim();
      if (scf) {
        if (buckets.hasOwnProperty(scfMethod)) buckets[scfMethod] += scf;
        else buckets['–î—Ä—É–≥–æ–µ'] += scf;
      }
      // –†–∞–±–æ—Ç–∞
      const labor = Number(j.labor_price || 0);
      const laborMethod = (j.labor_payment_method || '').trim();
      if (labor) {
        if (buckets.hasOwnProperty(laborMethod)) buckets[laborMethod] += labor;
        else buckets['–î—Ä—É–≥–æ–µ'] += labor;
      }
    });

    const total =
      buckets['–ù–∞–ª–∏—á–Ω—ã–µ'] +
      buckets['Zelle'] +
      buckets['–ß–µ–∫'] +
      buckets['–ö–∞—Ä—Ç–∞'] +
      buckets['–î—Ä—É–≥–æ–µ'];

    return { buckets, total };
  }, [filteredJobs]);

  // ===== –≠–∫—Å–ø–æ—Ä—Ç =====
  const handleExport = () => {
    const rows = filteredJobs.map((j) => {
      const { scf, labor, materials, total, salary } = calcRow(j);
      return {
        'Job #': j.job_number || j.id,
        '–¢–µ—Ö–Ω–∏–∫': getTechnicianName(j.technician_id),
        'SCF': scf,
        '–û–ø–ª–∞—Ç–∞ SCF': j.scf_payment_method || '',
        '–†–∞–±–æ—Ç–∞': labor,
        '–û–ø–ª–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã': j.labor_payment_method || '',
        '–î–µ—Ç–∞–ª–∏ (—Å—É–º–º–∞)': materials,
        '–ò—Ç–æ–≥–æ (SCF+–†–∞–±–æ—Ç–∞)': total,
        '–ó–∞—Ä–ø–ª–∞—Ç–∞ (0.5*–†–∞–±–æ—Ç–∞ + 50 - –î–µ—Ç–∞–ª–∏)': salary,
        '–í—ã–ø–ª–∞—á–µ–Ω–æ': j.salary_paid ? '–î–∞' : '–ù–µ—Ç',
        '–°–æ–∑–¥–∞–Ω–æ': j.created_at || '',
      };
    });
    const ws = XLSX.utils.json_to_sheet(rows);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '–§–∏–Ω–∞–Ω—Å—ã');
    XLSX.writeFile(wb, 'finance_export.xlsx');
  };

  // ===== –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ ¬´–∑–∞—Ä–ø–ª–∞—Ç–∞ –≤—ã–ø–ª–∞—á–µ–Ω–∞¬ª =====
  const markSalaryPaid = async (jobId) => {
    const { error } = await supabase
      .from('jobs')
      .update({ salary_paid: true, salary_paid_at: new Date().toISOString() })
      .eq('id', jobId);

    if (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–ª–∞—á–µ–Ω–Ω–æ–µ:', error);
      return;
    }
    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setJobs((prev) =>
      prev.map((j) => (j.id === jobId ? { ...j, salary_paid: true, salary_paid_at: new Date().toISOString() } : j))
    );
  };

  // ===== –ò—Ç–æ–≥ –æ–±—â–∏—Ö —Å—É–º–º (SCF + –†–∞–±–æ—Ç–∞) =====
  const overallTotal = useMemo(() => {
    return filteredJobs.reduce((acc, j) => {
      const { scf, labor } = calcRow(j);
      return acc + scf + labor;
    }, 0);
  }, [filteredJobs]);

  return (
    <div style={{ padding: 16 }}>
      <h1 style={{ fontSize: 28, fontWeight: 700, marginBottom: 16 }}>üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç</h1>

      {/* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥ –∏ —Ç–µ—Ö–Ω–∏–∫) */}
      <div
        style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(2, minmax(220px, 1fr))',
          gap: 12,
          marginBottom: 16,
          maxWidth: TABLE_WIDTH,
        }}
      >
        <div>
          <label style={{ display: 'block', fontSize: 12, marginBottom: 6 }}>
            –û—Ç—á—ë—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥
          </label>
          <select
            value={filterPeriod}
            onChange={(e) => setFilterPeriod(e.target.value)}
            style={selectStyle}
          >
            {periodOptions.map((p) => (
              <option key={p.value} value={p.value}>
                {p.label}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label style={{ display: 'block', fontSize: 12, marginBottom: 6 }}>
            –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ—Ö–Ω–∏–∫—É
          </label>
          <select
            value={filterTech}
            onChange={(e) => setFilterTech(e.target.value)}
            style={selectStyle}
          >
            <option value="all">–í—Å–µ</option>
            {technicians.map((tech) => (
              <option key={tech.id} value={String(tech.id)}>
                {tech.name}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* –≠–∫—Å–ø–æ—Ä—Ç */}
      <div style={{ textAlign: 'right', maxWidth: TABLE_WIDTH, marginBottom: 10 }}>
        <button
          onClick={handleExport}
          style={{ ...btn, background: '#16a34a', color: '#fff' }}
        >
          üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
        </button>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ */}
      <div style={{ overflowX: 'auto' }}>
        <table style={tableStyle}>
          <colgroup>
            <col style={{ width: COL.JOB }} />
            <col style={{ width: COL.TECH }} />
            <col style={{ width: COL.SCF }} />
            <col style={{ width: COL.LABOR }} />
            <col style={{ width: COL.MATERIALS }} />
            <col style={{ width: COL.TOTAL }} />
            <col style={{ width: COL.SALARY }} />
            <col style={{ width: COL.PAID }} />
            <col style={{ width: COL.ACTION }} />
          </colgroup>

          <thead>
            <tr>
              <th style={thStyle(COL.JOB)}>Job #</th>
              <th style={thStyle(COL.TECH)}>–¢–µ—Ö–Ω–∏–∫</th>
              <th style={thStyle(COL.SCF, 'right')}>SCF</th>
              <th style={thStyle(COL.LABOR, 'right')}>–†–∞–±–æ—Ç–∞</th>
              <th style={thStyle(COL.MATERIALS, 'right')}>–î–µ—Ç–∞–ª–∏</th>
              <th style={thStyle(COL.TOTAL, 'right')}>–ò—Ç–æ–≥–æ (SCF+–†–∞–±–æ—Ç–∞)</th>
              <th style={thStyle(COL.SALARY, 'right')}>–ó–∞—Ä–ø–ª–∞—Ç–∞ (0.5*–†–∞–± + 50 - –î–µ—Ç–∞–ª–∏)</th>
              <th style={thStyle(COL.PAID, 'center')}>–í—ã–ø–ª–∞—á–µ–Ω–æ</th>
              <th style={thStyle(COL.ACTION, 'center')}>–î–µ–π—Å—Ç–≤–∏–µ</th>
            </tr>
          </thead>

          <tbody>
            {filteredJobs.map((j) => {
              const { scf, labor, materials, total, salary } = calcRow(j);
              const paid = !!j.salary_paid;
              return (
                <tr
                  key={j.id}
                  style={{
                    background: paid ? '#ecfdf5' : 'transparent', // –∑–µ–ª—ë–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ –¥–ª—è –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã—Ö
                  }}
                >
                  <td style={tdStyle(COL.JOB)}>{j.job_number || j.id}</td>
                  <td style={tdStyle(COL.TECH)}>{getTechnicianName(j.technician_id)}</td>
                  <td style={tdStyle(COL.SCF, 'right')}>{formatMoney(scf)}</td>
                  <td style={tdStyle(COL.LABOR, 'right')}>{formatMoney(labor)}</td>
                  <td style={tdStyle(COL.MATERIALS, 'right')}>{formatMoney(materials)}</td>
                  <td style={{ ...tdStyle(COL.TOTAL, 'right'), fontWeight: 600 }}>
                    {formatMoney(total)}
                  </td>
                  <td style={tdStyle(COL.SALARY, 'right')}>
                    {formatMoney(salary)}
                  </td>
                  <td style={{ ...tdStyle(COL.PAID, 'center'), fontWeight: 600 }}>
                    {paid ? '–î–∞' : '–ù–µ—Ç'}
                  </td>
                  <td style={{ ...tdStyle(COL.ACTION, 'center') }}>
                    {!paid ? (
                      <button
                        onClick={() => markSalaryPaid(j.id)}
                        style={{ ...btn, background: '#2563eb', color: '#fff' }}
                        title="–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–ª–∞—á–µ–Ω–Ω–æ–µ"
                      >
                        –í—ã–ø–ª–∞—Ç–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É
                      </button>
                    ) : (
                      <span style={{ color: '#16a34a' }}>‚úî –í—ã–ø–ª–∞—á–µ–Ω–æ</span>
                    )}
                  </td>
                </tr>
              );
            })}

            {filteredJobs.length === 0 && (
              <tr>
                <td style={tdStyle(TABLE_WIDTH)} colSpan={9}>
                  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* –û—Ç—á—ë—Ç –ø–æ –¥–µ–Ω—å–≥–∞–º */}
      <div style={{ maxWidth: TABLE_WIDTH, marginTop: 16 }}>
        <h2 style={{ fontSize: 18, fontWeight: 700, marginBottom: 8 }}>
          –û—Ç—á—ë—Ç –ø–æ –¥–µ–Ω—å–≥–∞–º (SCF + –†–∞–±–æ—Ç–∞):
        </h2>
        <ul style={{ margin: 0, padding: 0, listStyle: 'none', lineHeight: '1.9' }}>
          <li>–ù–∞–ª–∏—á–Ω—ã–µ: <strong>{formatMoney(moneyReport.buckets['–ù–∞–ª–∏—á–Ω—ã–µ'])}</strong></li>
          <li>Zelle: <strong>{formatMoney(moneyReport.buckets['Zelle'])}</strong></li>
          <li>–ß–µ–∫: <strong>{formatMoney(moneyReport.buckets['–ß–µ–∫'])}</strong></li>
          <li>–ö–∞—Ä—Ç–∞: <strong>{formatMoney(moneyReport.buckets['–ö–∞—Ä—Ç–∞'])}</strong></li>
          {moneyReport.buckets['–î—Ä—É–≥–æ–µ'] > 0 && (
            <li>–î—Ä—É–≥–æ–µ: <strong>{formatMoney(moneyReport.buckets['–î—Ä—É–≥–æ–µ'])}</strong></li>
          )}
        </ul>
      </div>

      <div style={{ textAlign: 'right', maxWidth: TABLE_WIDTH, fontSize: 18, fontWeight: 700, marginTop: 8 }}>
        –û–±—â–∞—è —Å—É–º–º–∞ (SCF + –†–∞–±–æ—Ç–∞): {formatMoney(moneyReport.total)}
      </div>

      <div style={{ textAlign: 'right', maxWidth: TABLE_WIDTH, fontSize: 16, marginTop: 4, color: '#6b7280' }}>
        –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ (—Ç–∞ –∂–µ —Å—É–º–º–∞): {formatMoney(overallTotal)}
      </div>
    </div>
  );
};

export default FinancePage;
