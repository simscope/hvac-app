import React, { useEffect, useState } from 'react';
import { supabase } from '../supabaseClient';

const roleOptions = [
  { value: 'manager', label: '–ú–µ–Ω–µ–¥–∂–µ—Ä' },
  { value: 'tech', label: '–¢–µ—Ö–Ω–∏–∫' },
];

const inputStyle = { width: '100%', padding: 6, border: '1px solid #e5e7eb', borderRadius: 6 };
const th = { padding: '8px 10px', borderBottom: '1px solid #e5e7eb', textAlign: 'left', fontWeight: 600 };
const td = { padding: '6px 10px', borderBottom: '1px solid #f1f5f9' };

export default function TechniciansPage() {
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [busyId, setBusyId] = useState(null);

  // —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const [newRow, setNewRow] = useState({ name: '', phone: '', email: '', role: 'tech' });

  useEffect(() => {
    load();
  }, []);

  const load = async () => {
    setLoading(true);
    const { data, error } = await supabase
      .from('technicians')
      .select('id, name, phone, email, role, auth_user_id')
      .order('name', { ascending: true });

    if (error) {
      console.error(error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
    } else {
      setItems(data || []);
    }
    setLoading(false);
  };

  const onChangeCell = (id, field, value) => {
    setItems(prev => prev.map(r => (r.id === id ? { ...r, [field]: value } : r)));
  };

  const saveRow = async (row) => {
    setBusyId(row.id);
    const payload = {
      name: row.name?.trim() || null,
      phone: row.phone?.trim() || null,
      email: row.email?.trim() || null,    // üëà –Ω–æ–≤—ã–π email
      role: row.role || null,
    };
    const { error } = await supabase.from('technicians').update(payload).eq('id', row.id);
    setBusyId(null);
    if (error) {
      console.error(error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
      return;
    }
    await load();
  };

  const addRow = async () => {
    if (!newRow.name?.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è');
      return;
    }
    const payload = {
      name: newRow.name.trim(),
      phone: newRow.phone?.trim() || null,
      email: newRow.email?.trim() || null, // üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º email
      role: newRow.role || 'tech',
    };
    const { error } = await supabase.from('technicians').insert(payload);
    if (error) {
      console.error(error);
      if (String(error.message).includes('unique')) {
        alert('–¢–∞–∫–æ–π email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –¥—Ä—É–≥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏');
      }
      return;
    }
    setNewRow({ name: '', phone: '', email: '', role: 'tech' });
    await load();
  };

  const removeRow = async (id) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?')) return;
    const { error } = await supabase.from('technicians').delete().eq('id', id);
    if (error) {
      console.error(error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
      return;
    }
    setItems(prev => prev.filter(r => r.id !== id));
  };

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ª—à–µ–±–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ email —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
   * –†–∞–±–æ—Ç–∞–µ—Ç —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º –∫–ª—é—á–æ–º ‚Äî admin-–∫–ª—é—á –Ω–µ –Ω—É–∂–µ–Ω.
   * –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ —Ç—Ä–∏–≥–≥–µ—Ä –≤ –ë–î –ø—Ä–∏–≤—è–∂–µ—Ç auth_user_id –∫ technicians –ø–æ email.
   */
  const sendMagicLink = async (row) => {
    const email = row.email?.trim();
    if (!email) {
      alert('–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω email');
      return;
    }

    try {
      setBusyId(row.id);
      const redirectTo = `${window.location.origin}/`; // –≤–µ—Ä–Ω—ë–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const { error } = await supabase.auth.signInWithOtp({
        email,
        options: { emailRedirectTo: redirectTo },
      });
      setBusyId(null);

      if (error) {
        console.error(error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É: ' + error.message);
        return;
      }
      alert('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ' + email);
    } catch (e) {
      setBusyId(null);
      console.error(e);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É');
    }
  };

  // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –±—ã—Å—Ç—Ä–∞—è ¬´—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–∏—Å—å–º–∞¬ª (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∞–º –∏–∑ –ø–æ—á—Ç—ã)
  const inviteMailto = (row) => {
    const appUrl = window.location.origin + '/';
    const subject = encodeURIComponent('–î–æ—Å—Ç—É–ø –≤ HVAC App');
    const body = encodeURIComponent(
      `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${appUrl}\n–ù–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ" –∏ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç email: ${row.email || ''}.\n`
    );
    return `mailto:${row.email || ''}?subject=${subject}&body=${body}`;
  };

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</h1>

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      <div
        style={{
          display: 'grid',
          gridTemplateColumns: '2fr 1.5fr 2fr 1.2fr auto',
          gap: 8,
          marginBottom: 12,
          alignItems: 'center',
        }}
      >
        <input
          style={inputStyle}
          placeholder="–ò–º—è"
          value={newRow.name}
          onChange={e => setNewRow({ ...newRow, name: e.target.value })}
        />
        <input
          style={inputStyle}
          placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
          value={newRow.phone}
          onChange={e => setNewRow({ ...newRow, phone: e.target.value })}
        />
        <input
          style={inputStyle}
          placeholder="Email"
          value={newRow.email}
          onChange={e => setNewRow({ ...newRow, email: e.target.value })}
        />
        <select
          style={inputStyle}
          value={newRow.role}
          onChange={e => setNewRow({ ...newRow, role: e.target.value })}
        >
          {roleOptions.map(o => (
            <option key={o.value} value={o.value}>{o.label}</option>
          ))}
        </select>
        <button onClick={addRow} style={{ padding: '6px 12px' }}>‚ûï –î–æ–±–∞–≤–∏—Ç—å</button>
      </div>

      <div className="overflow-x-auto">
        <table style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead style={{ background: '#f8fafc' }}>
            <tr>
              <th style={th} width="40">#</th>
              <th style={th}>–ò–º—è</th>
              <th style={th} width="160">–¢–µ–ª–µ—Ñ–æ–Ω</th>
              <th style={th} width="240">Email</th>
              <th style={th} width="140">–î–æ–ª–∂–Ω–æ—Å—Ç—å</th>
              <th style={{ ...th, textAlign: 'center' }} width="260">–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {loading && (
              <tr><td style={td} colSpan={6}>–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</td></tr>
            )}
            {!loading && items.length === 0 && (
              <tr><td style={td} colSpan={6}>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</td></tr>
            )}
            {items.map((row, idx) => (
              <tr key={row.id}>
                <td style={td}>{idx + 1}</td>
                <td style={td}>
                  <input
                    style={inputStyle}
                    value={row.name || ''}
                    onChange={e => onChangeCell(row.id, 'name', e.target.value)}
                  />
                </td>
                <td style={td}>
                  <input
                    style={inputStyle}
                    value={row.phone || ''}
                    onChange={e => onChangeCell(row.id, 'phone', e.target.value)}
                  />
                </td>
                <td style={td}>
                  <input
                    style={inputStyle}
                    type="email"
                    value={row.email || ''}
                    onChange={e => onChangeCell(row.id, 'email', e.target.value)}
                  />
                </td>
                <td style={td}>
                  <select
                    style={inputStyle}
                    value={row.role || 'tech'}
                    onChange={e => onChangeCell(row.id, 'role', e.target.value)}
                  >
                    {roleOptions.map(o => (
                      <option key={o.value} value={o.value}>{o.label}</option>
                    ))}
                  </select>
                </td>
                <td style={{ ...td, textAlign: 'center', whiteSpace: 'nowrap' }}>
                  <button
                    title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
                    onClick={() => saveRow(row)}
                    style={{ marginRight: 6 }}
                    disabled={busyId === row.id}
                  >
                    {busyId === row.id ? '‚Ä¶' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                  </button>

                  <button
                    title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞"
                    onClick={() => sendMagicLink(row)}
                    style={{ marginRight: 6 }}
                    disabled={busyId === row.id}
                  >
                    ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
                  </button>

                  <a
                    title="–û—Ç–∫—Ä—ã—Ç—å –ø–∏—Å—å–º–æ –≤ –ø–æ—á—Ç–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ"
                    href={inviteMailto(row)}
                    style={{ marginRight: 6 }}
                  >
                    üìß –ü–∏—Å—å–º–æ
                  </a>

                  <button title="–£–¥–∞–ª–∏—Ç—å" onClick={() => removeRow(row.id)}>üóëÔ∏è</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
