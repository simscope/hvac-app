import React, { useEffect, useState } from 'react';
import { supabase } from '../supabaseClient';
import { useAuth } from '../context/AuthContext';

// —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–æ–ª–µ–π
const roleOptions = [
  { value: 'manager', label: '–ú–µ–Ω–µ–¥–∂–µ—Ä' },
  { value: 'tech', label: '–¢–µ—Ö–Ω–∏–∫' },
];

const inputStyle = { width: '100%', padding: 6, border: '1px solid #e5e7eb', borderRadius: 6 };
const th = { padding: '8px 10px', borderBottom: '1px solid #e5e7eb', textAlign: 'left', fontWeight: 600 };
const td = { padding: '6px 10px', borderBottom: '1px solid #f1f5f9' };

export default function TechniciansPage() {
  const { isAdmin, loading: authLoading } = useAuth();

  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);

  // —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const [newRow, setNewRow] = useState({ name: '', phone: '', email: '', role: 'tech' });

  useEffect(() => {
    if (!authLoading) load();
  }, [authLoading]);

  const load = async () => {
    setLoading(true);
    const { data, error } = await supabase
      .from('technicians')
      .select('*')
      .order('name', { ascending: true });

    if (error) {
      console.error(error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
      setItems([]);
    } else {
      setItems(data || []);
    }
    setLoading(false);
  };

  const onChangeCell = (id, field, value) => {
    setItems(prev => prev.map(r => (r.id === id ? { ...r, [field]: value } : r)));
  };

  const saveRow = async (row) => {
    const payload = {
      name: row.name ?? null,
      phone: row.phone ?? null,
      email: row.email ?? null,
      role: row.role ?? null,
    };
    const { error } = await supabase.from('technicians').update(payload).eq('id', row.id);
    if (error) {
      console.error(error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
      return;
    }
    await load();
  };

  const addRow = async () => {
    if (!newRow.name?.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è');
      return;
    }
    const payload = {
      name: newRow.name.trim(),
      phone: newRow.phone?.trim() || null,
      email: newRow.email?.trim() || null,
      role: newRow.role || 'tech',
    };
    const { error } = await supabase.from('technicians').insert(payload);
    if (error) {
      console.error(error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏');
      return;
    }
    setNewRow({ name: '', phone: '', email: '', role: 'tech' });
    await load();
  };

  const removeRow = async (id) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?')) return;
    const { error } = await supabase.from('technicians').delete().eq('id', id);
    if (error) {
      console.error(error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
      return;
    }
    setItems(prev => prev.filter(r => r.id !== id));
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞ (email OTP)
  const sendLoginLink = async (email) => {
    const target = (email || '').trim();
    if (!target) {
      alert('–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø—É—Å—Ç–æ–π Email');
      return;
    }
    // –í Supabase ‚Üí Authentication ‚Üí URL settings –ø—Ä–æ–≤–µ—Ä—å "Site URL".
    const redirectTo = window.location.origin; // –∫—É–¥–∞ –≤–µ—Ä–Ω–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ –ø–∏—Å—å–º—É
    const { error } = await supabase.auth.signInWithOtp({
      email: target,
      options: { emailRedirectTo: redirectTo },
    });
    if (error) {
      console.error(error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ: ' + (error.message || '–æ—à–∏–±–∫–∞'));
      return;
    }
    alert('–ü–∏—Å—å–º–æ —Å–æ —Å—Å—ã–ª–∫–æ–π –¥–ª—è –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ' + target);
  };

  // –≥–µ–π—Ç: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
  if (authLoading) return <div className="p-4">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>;
  if (!isAdmin) return <div className="p-4">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</div>;

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</h1>

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1.3fr 2fr 1.2fr auto', gap: 8, marginBottom: 12 }}>
        <input
          style={inputStyle}
          placeholder="–ò–º—è"
          value={newRow.name}
          onChange={e => setNewRow({ ...newRow, name: e.target.value })}
        />
        <input
          style={inputStyle}
          placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
          value={newRow.phone}
          onChange={e => setNewRow({ ...newRow, phone: e.target.value })}
        />
        <input
          style={inputStyle}
          placeholder="Email"
          value={newRow.email}
          onChange={e => setNewRow({ ...newRow, email: e.target.value })}
        />
        <select
          style={inputStyle}
          value={newRow.role}
          onChange={e => setNewRow({ ...newRow, role: e.target.value })}
        >
          {roleOptions.map(o => (
            <option key={o.value} value={o.value}>{o.label}</option>
          ))}
        </select>
        <button onClick={addRow} style={{ padding: '6px 12px' }}>‚ûï –î–æ–±–∞–≤–∏—Ç—å</button>
      </div>

      <div className="overflow-x-auto">
        <table style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead style={{ background: '#f8fafc' }}>
            <tr>
              <th style={th} width="40">#</th>
              <th style={th}>–ò–º—è</th>
              <th style={th} width="180">–¢–µ–ª–µ—Ñ–æ–Ω</th>
              <th style={th} width="240">Email</th>
              <th style={th} width="160">–î–æ–ª–∂–Ω–æ—Å—Ç—å</th>
              <th style={{ ...th, textAlign: 'center' }} width="220">–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {loading && (
              <tr><td style={td} colSpan={6}>–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</td></tr>
            )}
            {!loading && items.length === 0 && (
              <tr><td style={td} colSpan={6}>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</td></tr>
            )}
            {items.map((row, idx) => (
              <tr key={row.id}>
                <td style={td}>{idx + 1}</td>
                <td style={td}>
                  <input
                    style={inputStyle}
                    value={row.name || ''}
                    onChange={e => onChangeCell(row.id, 'name', e.target.value)}
                  />
                </td>
                <td style={td}>
                  <input
                    style={inputStyle}
                    value={row.phone || ''}
                    onChange={e => onChangeCell(row.id, 'phone', e.target.value)}
                  />
                </td>
                <td style={td}>
                  <input
                    style={inputStyle}
                    value={row.email || ''}
                    onChange={e => onChangeCell(row.id, 'email', e.target.value)}
                  />
                </td>
                <td style={td}>
                  <select
                    style={inputStyle}
                    value={row.role || 'tech'}
                    onChange={e => onChangeCell(row.id, 'role', e.target.value)}
                  >
                    {roleOptions.map(o => (
                      <option key={o.value} value={o.value}>{o.label}</option>
                    ))}
                  </select>
                </td>
                <td style={{ ...td, textAlign: 'center', whiteSpace: 'nowrap' }}>
                  <button title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" onClick={() => saveRow(row)} style={{ marginRight: 8 }}>üíæ</button>
                  <button title="–ü–∏—Å—å–º–æ –¥–ª—è –≤—Ö–æ–¥–∞" onClick={() => sendLoginLink(row.email)} style={{ marginRight: 8 }}>
                    ‚úâÔ∏è –í–æ–π—Ç–∏ –ø–æ email
                  </button>
                  <button title="–£–¥–∞–ª–∏—Ç—å" onClick={() => removeRow(row.id)}>üóëÔ∏è</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
