// client/src/pages/TechniciansPage.jsx
import React, { useEffect, useState } from 'react';
import { supabase } from '../supabaseClient';
import { useAuth } from '../context/AuthContext';

// –î–æ–ª–∂–Ω–æ—Å—Ç–∏
const roleOptions = [
  { value: 'admin',   label: '–ê–¥–º–∏–Ω' },
  { value: 'manager', label: '–ú–µ–Ω–µ–¥–∂–µ—Ä' },
  { value: 'tech',    label: '–¢–µ—Ö–Ω–∏–∫' },
];

const inputStyle = { width: '100%', padding: 6, border: '1px solid #e5e7eb', borderRadius: 6 };
const th = { padding: '8px 10px', borderBottom: '1px solid #e5e7eb', textAlign: 'left', fontWeight: 600 };
const td = { padding: '6px 10px', borderBottom: '1px solid #f1f5f9' };

export default function TechniciansPage() {
  // –†–æ—É—Ç —É–∂–µ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ —Ä–æ–ª–∏; –∏—Å–ø–æ–ª—å–∑—É–µ–º auth —Ç–æ–ª—å–∫–æ —Ä–∞–¥–∏ —Å–ø–∏–Ω–Ω–µ—Ä–∞
  const { loading: authLoading } = useAuth();

  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);

  // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const [newRow, setNewRow] = useState({ name: '', phone: '', email: '', role: 'tech' });

  useEffect(() => {
    if (!authLoading) load();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [authLoading]);

  const load = async () => {
    setLoading(true);
    const { data, error } = await supabase
      .from('technicians')
      .select('id, name, phone, email, role')
      .order('name', { ascending: true });

    if (error) {
      console.error('technicians select error:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
      setItems([]);
    } else {
      setItems(data || []);
    }
    setLoading(false);
  };

  const onChangeCell = (id, field, value) => {
    setItems(prev => prev.map(r => (r.id === id ? { ...r, [field]: value } : r)));
  };

  const saveRow = async (row) => {
    const payload = {
      name:  row.name?.trim()  || null,
      phone: row.phone?.trim() || null,
      email: row.email?.trim() || null,
      role:  row.role ? String(row.role).trim().toLowerCase() : null,
    };
    const { error } = await supabase.from('technicians').update(payload).eq('id', row.id);
    if (error) {
      console.error('technicians update error:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
      return;
    }
    await load();
  };

  const addRow = async () => {
    if (!newRow.name?.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è');
      return;
    }
    const payload = {
      name:  newRow.name.trim(),
      phone: newRow.phone?.trim() || null,
      email: newRow.email?.trim() || null,
      role:  (newRow.role || 'tech').toLowerCase().trim(),
    };
    const { error } = await supabase.from('technicians').insert(payload);
    if (error) {
      console.error('technicians insert error:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏');
      return;
    }
    setNewRow({ name: '', phone: '', email: '', role: 'tech' });
    await load();
  };

  const removeRow = async (id) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?')) return;
    const { error } = await supabase.from('technicians').delete().eq('id', id);
    if (error) {
      console.error('technicians delete error:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
      return;
    }
    setItems(prev => prev.filter(r => r.id !== id));
  };

  // === –ê–î–ú–ò–ù–°–ö–ò–ï –î–ï–ô–°–¢–í–ò–Ø ===

  // 1) –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (email+–ø–∞—Ä–æ–ª—å) –∏ —Å–≤—è–∑–∞—Ç—å —Å technicians
  const createUserWithPassword = async (row) => {
    const email = (row.email || '').trim();
    if (!email) return alert('–£–∫–∞–∂–∏—Ç–µ email —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');

    const password = prompt('–ó–∞–¥–∞–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤):');
    if (!password) return;

    try {
      const { data, error } = await supabase.functions.invoke('admin-create-user', {
        body: {
          email,
          password,
          technician_id: row.id,
          name: row.name,
          role: row.role,
          phone: row.phone,
        },
      });
      if (error || !data?.ok) throw new Error(data?.message || error?.message || 'error');
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω. –ü–µ—Ä–µ–¥–∞–π—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.');
      await load();
    } catch (e) {
      console.error(e);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + e.message);
    }
  };

  // 2) –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ ¬´–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è¬ª
  const generateResetLink = async (row) => {
    const email = (row.email || '').trim();
    if (!email) return alert('–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø—É—Å—Ç–æ–π email');

    try {
      const { data, error } = await supabase.functions.invoke('admin-reset-password', {
        body: { email, redirectTo: `${window.location.origin}/#/login` },
      });
      if (error || !data?.ok) throw new Error(data?.message || error?.message || 'error');

      const link = data.link;
      await navigator.clipboard.writeText(link);
      alert('–°—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:\n' + link);
    } catch (e) {
      console.error(e);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É: ' + e.message);
    }
  };

  if (authLoading) return <div className="p-4">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>;

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</h1>

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1.3fr 2fr 1.2fr auto', gap: 8, marginBottom: 12 }}>
        <input
          style={inputStyle}
          placeholder="–ò–º—è"
          value={newRow.name}
          onChange={e => setNewRow({ ...newRow, name: e.target.value })}
        />
        <input
          style={inputStyle}
          placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
          value={newRow.phone}
          onChange={e => setNewRow({ ...newRow, phone: e.target.value })}
        />
        <input
          style={inputStyle}
          placeholder="Email"
          value={newRow.email}
          onChange={e => setNewRow({ ...newRow, email: e.target.value })}
        />
        <select
          style={inputStyle}
          value={newRow.role}
          onChange={e => setNewRow({ ...newRow, role: e.target.value })}
        >
          {roleOptions.map(o => (
            <option key={o.value} value={o.value}>{o.label}</option>
          ))}
        </select>
        <button onClick={addRow} style={{ padding: '6px 12px' }}>‚ûï –î–æ–±–∞–≤–∏—Ç—å</button>
      </div>

      <div className="overflow-x-auto">
        <table style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead style={{ background: '#f8fafc' }}>
            <tr>
              <th style={th} width="40">#</th>
              <th style={th}>–ò–º—è</th>
              <th style={th} width="180">–¢–µ–ª–µ—Ñ–æ–Ω</th>
              <th style={th} width="240">Email</th>
              <th style={th} width="160">–î–æ–ª–∂–Ω–æ—Å—Ç—å</th>
              <th style={{ ...th, textAlign: 'center' }} width="380">–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {loading && (
              <tr><td style={td} colSpan={6}>–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</td></tr>
            )}
            {!loading && items.length === 0 && (
              <tr><td style={td} colSpan={6}>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</td></tr>
            )}
            {items.map((row, idx) => (
              <tr key={row.id}>
                <td style={td}>{idx + 1}</td>
                <td style={td}>
                  <input
                    style={inputStyle}
                    value={row.name || ''}
                    onChange={e => onChangeCell(row.id, 'name', e.target.value)}
                  />
                </td>
                <td style={td}>
                  <input
                    style={inputStyle}
                    value={row.phone || ''}
                    onChange={e => onChangeCell(row.id, 'phone', e.target.value)}
                  />
                </td>
                <td style={td}>
                  <input
                    style={inputStyle}
                    value={row.email || ''}
                    onChange={e => onChangeCell(row.id, 'email', e.target.value)}
                  />
                </td>
                <td style={td}>
                  <select
                    style={inputStyle}
                    value={(row.role || 'tech').toLowerCase()}
                    onChange={e => onChangeCell(row.id, 'role', e.target.value)}
                  >
                    {roleOptions.map(o => (
                      <option key={o.value} value={o.value}>{o.label}</option>
                    ))}
                  </select>
                </td>
                <td style={{ ...td, textAlign: 'center', whiteSpace: 'nowrap' }}>
                  <button title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" onClick={() => saveRow(row)} style={{ marginRight: 8 }}>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                  <button title="–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (email+–ø–∞—Ä–æ–ª—å)" onClick={() => createUserWithPassword(row)} style={{ marginRight: 8 }}>
                    üîê –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                  </button>
                  <button title="–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è (—Å—Å—ã–ª–∫–∞)" onClick={() => generateResetLink(row)} style={{ marginRight: 8 }}>
                    ‚ôªÔ∏è –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
                  </button>
                  <button title="–£–¥–∞–ª–∏—Ç—å" onClick={() => removeRow(row.id)}>üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
