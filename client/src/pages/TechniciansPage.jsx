// client/src/pages/TechniciansPage.jsx
import React, { useEffect, useState } from 'react';
import { supabase } from '../supabaseClient';
import { useAuth } from '../context/AuthContext';

// –†–æ–ª–∏
const roleOptions = [
  { value: 'admin',   label: '–ê–¥–º–∏–Ω' },
  { value: 'manager', label: '–ú–µ–Ω–µ–¥–∂–µ—Ä' },
  { value: 'tech',    label: '–¢–µ—Ö–Ω–∏–∫' },
];

const inputStyle = { width: '100%', padding: 6, border: '1px solid #e5e7eb', borderRadius: 6 };
const th = { padding: '8px 10px', borderBottom: '1px solid #e5e7eb', textAlign: 'left', fontWeight: 600 };
const td = { padding: '6px 10px', borderBottom: '1px solid #f1f5f9' };

export default function TechniciansPage() {
  // –î–æ—Å—Ç—É–ø —Å—é–¥–∞ —É–∂–µ –ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω —á–µ—Ä–µ–∑ RequireRole
  const { loading: authLoading } = useAuth();

  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);

  // —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const [newRow, setNewRow] = useState({ name: '', phone: '', email: '', role: 'tech' });

  useEffect(() => {
    if (!authLoading) load();
  }, [authLoading]);

  const load = async () => {
    setLoading(true);
    const { data, error } = await supabase
      .from('technicians')
      .select('id, name, phone, email, role, auth_user_id')
      .order('name', { ascending: true });

    if (error) {
      console.error('technicians select error:', error);
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
      setItems([]);
    } else {
      setItems(data || []);
    }
    setLoading(false);
  };

  const onChangeCell = (id, field, value) => {
    setItems(prev => prev.map(r => (r.id === id ? { ...r, [field]: value } : r)));
  };

  const saveRow = async (row) => {
    const payload = {
      name:  row.name?.trim()  || null,
      phone: row.phone?.trim() || null,
      email: row.email?.trim() || null,
      role:  row.role ? String(row.role).trim().toLowerCase() : null,
    };
    const { error } = await supabase.from('technicians').update(payload).eq('id', row.id);
    if (error) {
      console.error('technicians update error:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
      return;
    }
    await load();
  };

  const addRow = async () => {
    if (!newRow.name?.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è');
      return;
    }
    const payload = {
      name:  newRow.name.trim(),
      phone: newRow.phone?.trim() || null,
      email: newRow.email?.trim() || null,
      role:  (newRow.role || 'tech').toLowerCase().trim(),
    };
    const { error } = await supabase.from('technicians').insert(payload);
    if (error) {
      console.error('technicians insert error:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏');
      return;
    }
    setNewRow({ name: '', phone: '', email: '', role: 'tech' });
    await load();
  };

  const removeRow = async (id) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?')) return;
    const { error } = await supabase.from('technicians').delete().eq('id', id);
    if (error) {
      console.error('technicians delete error:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
      return;
    }
    setItems(prev => prev.filter(r => r.id !== id));
  };

  // === MAGIC LINK (email OTP) ================================
  const sendMagicLink = async (row) => {
    const target = (row.email || '').trim();
    if (!target) {
      alert('–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø—É—Å—Ç–æ–π Email');
      return;
    }

    // –¥–ª—è hash-—Ä–æ—É—Ç–µ—Ä–∞
    const redirectTo = `${window.location.origin}/#/login`;

    // 1) –ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è (–¥–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤ auth.users)
    let { error } = await supabase.auth.signInWithOtp({
      email: target,
      options: { emailRedirectTo: redirectTo, shouldCreateUser: false },
    });

    // 2) –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å (—Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ Signups –≤–∫–ª—é—á–µ–Ω—ã)
    if (error && /not\s*found|user.*does.*not.*exist/i.test(error.message || '')) {
      const res = await supabase.auth.signInWithOtp({
        email: target,
        options: { emailRedirectTo: redirectTo, shouldCreateUser: true },
      });
      error = res.error;
    }

    if (error) {
      // –ß–∞—Å—Ç—ã–µ –ø—Ä–∏—á–∏–Ω—ã
      if (error.status === 422 || /Signups.*not.*allowed/i.test(error.message || '')) {
        alert(
          '–í Supabase –æ—Ç–∫–ª—é—á–µ–Ω—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ email.\n' +
          '–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å¬ª ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–æ–º –∏ –ø–æ–ª—É—á–∏—Ç –ø–∏—Å—å–º–æ.'
        );
      } else if (/Database error saving new user/i.test(error.message || '')) {
        alert(
          'Supabase –Ω–µ —Å–º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Database error saving new user).\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å¬ª ‚Äî —ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.'
        );
      } else {
        console.error('sendMagicLink error:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ: ' + (error.message || '–æ—à–∏–±–∫–∞'));
      }
      return;
    }

    alert('–ü–∏—Å—å–º–æ —Å–æ —Å—Å—ã–ª–∫–æ–π –¥–ª—è –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ' + target);
  };

  // === INVITE (—á–µ—Ä–µ–∑ Edge-—Ñ—É–Ω–∫—Ü–∏—é) ============================
  // –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è `invite-user` (service role).
  const inviteUser = async (row) => {
    const email = (row.email || '').trim();
    if (!email) {
      alert('–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø—É—Å—Ç–æ–π Email');
      return;
    }
    try {
      const { data, error } = await supabase.functions.invoke('invite-user', {
        body: {
          email,
          name: row.name || '',
          phone: row.phone || '',
          role: (row.role || 'tech').toLowerCase(),
          technician_id: row.id,
        },
      });

      if (error) {
        // –ö–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç/–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: error.message –æ–±—ã—á–Ω–æ "Function not found"
        console.error('invite-user error:', error);
        alert(
          '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n' +
          '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –µ—â—ë –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ Edge-—Ñ—É–Ω–∫—Ü–∏—è invite-user.\n' +
          '–°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        );
        return;
      }

      // –æ–∂–∏–¥–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ { ok: true, userId }
      if (data?.ok) {
        // –ï—Å–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ —Å–≤—è–∑–∞–ª–∏ ‚Äî –¥–æ–ø.–ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –ø—Ä–æ–ø–∏—à–µ–º auth_user_id –ø–æ email
        if (!row.auth_user_id && data.userId) {
          await supabase.from('technicians').update({ auth_user_id: data.userId }).eq('id', row.id);
        }
        await load();
        alert('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –ø–∏—Å—å–º–æ –∏ –∑–∞–¥–∞—Å—Ç –ø–∞—Ä–æ–ª—å.');
      } else {
        console.warn('invite-user response:', data);
        alert('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ edge-—Ñ—É–Ω–∫—Ü–∏–∏.');
      }
    } catch (e) {
      console.error('invite-user exception:', e);
      alert('–°–±–æ–π –ø—Ä–∏ –≤—ã–∑–æ–≤–µ invite-user. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ–ø–ª–æ–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞.');
    }
  };

  if (authLoading) return <div className="p-4">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>;

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</h1>

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1.3fr 2fr 1.2fr auto', gap: 8, marginBottom: 12 }}>
        <input
          style={inputStyle}
          placeholder="–ò–º—è"
          value={newRow.name}
          onChange={e => setNewRow({ ...newRow, name: e.target.value })}
        />
        <input
          style={inputStyle}
          placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
          value={newRow.phone}
          onChange={e => setNewRow({ ...newRow, phone: e.target.value })}
        />
        <input
          style={inputStyle}
          placeholder="Email"
          value={newRow.email}
          onChange={e => setNewRow({ ...newRow, email: e.target.value })}
        />
        <select
          style={inputStyle}
          value={newRow.role}
          onChange={e => setNewRow({ ...newRow, role: e.target.value })}
        >
          {roleOptions.map(o => (
            <option key={o.value} value={o.value}>{o.label}</option>
          ))}
        </select>
        <button onClick={addRow} style={{ padding: '6px 12px' }}>‚ûï –î–æ–±–∞–≤–∏—Ç—å</button>
      </div>

      <div className="overflow-x-auto">
        <table style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead style={{ background: '#f8fafc' }}>
            <tr>
              <th style={th} width="40">#</th>
              <th style={th}>–ò–º—è</th>
              <th style={th} width="180">–¢–µ–ª–µ—Ñ–æ–Ω</th>
              <th style={th} width="260">Email</th>
              <th style={th} width="160">–î–æ–ª–∂–Ω–æ—Å—Ç—å</th>
              <th style={{ ...th, textAlign: 'center' }} width="320">–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {loading && (
              <tr><td style={td} colSpan={6}>–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</td></tr>
            )}
            {!loading && items.length === 0 && (
              <tr><td style={td} colSpan={6}>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</td></tr>
            )}
            {items.map((row, idx) => (
              <tr key={row.id}>
                <td style={td}>{idx + 1}</td>
                <td style={td}>
                  <input
                    style={inputStyle}
                    value={row.name || ''}
                    onChange={e => onChangeCell(row.id, 'name', e.target.value)}
                  />
                </td>
                <td style={td}>
                  <input
                    style={inputStyle}
                    value={row.phone || ''}
                    onChange={e => onChangeCell(row.id, 'phone', e.target.value)}
                  />
                </td>
                <td style={td}>
                  <input
                    style={inputStyle}
                    value={row.email || ''}
                    onChange={e => onChangeCell(row.id, 'email', e.target.value)}
                  />
                </td>
                <td style={td}>
                  <select
                    style={inputStyle}
                    value={(row.role || 'tech').toLowerCase()}
                    onChange={e => onChangeCell(row.id, 'role', e.target.value)}
                  >
                    {roleOptions.map(o => (
                      <option key={o.value} value={o.value}>{o.label}</option>
                    ))}
                  </select>
                </td>
                <td style={{ ...td, textAlign: 'center', whiteSpace: 'nowrap' }}>
                  <button title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" onClick={() => saveRow(row)} style={{ marginRight: 8 }}>üíæ</button>

                  {/* magic-link = –≤—Ö–æ–¥ –ø–æ email (–µ—Å–ª–∏ signups –≤–∫–ª—é—á–µ–Ω—ã) */}
                  <button
                    title="–í–æ–π—Ç–∏ –ø–æ email (magic-link)"
                    onClick={() => sendMagicLink(row)}
                    style={{ marginRight: 8 }}
                  >
                    ‚úâÔ∏è –í–æ–π—Ç–∏ –ø–æ email
                  </button>

                  {/* —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –ø—Ä–∏–≥–ªa—à–µ–Ω–∏–µ = —Å–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–≥–¥–∞ signups –∑–∞–∫—Ä—ã—Ç—ã */}
                  <button
                    title="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å (—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä)"
                    onClick={() => inviteUser(row)}
                    style={{ marginRight: 8 }}
                  >
                    üì® –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å
                  </button>

                  <button title="–£–¥–∞–ª–∏—Ç—å" onClick={() => removeRow(row.id)}>üóëÔ∏è</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ */}
      <div style={{ marginTop: 12, color: '#6b7280', fontSize: 13, lineHeight: 1.5 }}>
        <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –µ—Å–ª–∏ –ø—Ä–∏ ¬´–í–æ–π—Ç–∏ –ø–æ email¬ª –≤–∏–¥–∏—Ç–µ 422/‚ÄúSignups not allowed‚Äù, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å¬ª.
        –≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç Edge-—Ñ—É–Ω–∫—Ü–∏—é <code>invite-user</code> (–Ω—É–∂–µ–Ω service role).  
        –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ <code>auth.admin.inviteUserByEmail</code> –∏ –≤–µ—Ä–Ω—É—Ç—å
        <code>{{"{ ok: true, userId }"}}</code>. –ú—ã —Å—Ä–∞–∑—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º <code>auth_user_id</code> –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∞.
      </div>
    </div>
  );
}
