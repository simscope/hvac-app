// client/src/pages/TechniciansPage.jsx
import React, { useEffect, useState } from "react";
import { supabase } from "../supabaseClient";
import { useAuth } from "../context/AuthContext";

const roleOptions = [
  { value: "admin", label: "–ê–¥–º–∏–Ω" },
  { value: "manager", label: "–ú–µ–Ω–µ–¥–∂–µ—Ä" },
  { value: "tech", label: "–¢–µ—Ö–Ω–∏–∫" },
];

const th = { padding: "8px 10px", borderBottom: "1px solid #e5e7eb", textAlign: "left", fontWeight: 600 };
const td = { padding: "6px 10px", borderBottom: "1px solid #f1f5f9" };
const inputStyle = { width: "100%", padding: 6, border: "1px solid #e5e7eb", borderRadius: 6 };

export default function TechniciansPage() {
  const { role, loading: authLoading } = useAuth();
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);

  const [newRow, setNewRow] = useState({ name: "", phone: "", email: "", role: "tech" });

  useEffect(() => {
    if (!authLoading) load();
  }, [authLoading]);

  async function load() {
    setLoading(true);
    const { data, error } = await supabase
      .from("technicians")
      .select("id, name, phone, email, role, auth_user_id")
      .order("name", { ascending: true });

    if (error) {
      console.error(error);
      alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤");
      setItems([]);
    } else {
      setItems(data || []);
    }
    setLoading(false);
  }

  const onChangeCell = (id, field, value) => {
    setItems(prev => prev.map(r => (r.id === id ? { ...r, [field]: value } : r)));
  };

  async function saveRow(row) {
    const payload = {
      name: row.name?.trim() || null,
      phone: row.phone?.trim() || null,
      email: row.email?.trim() || null,
      role: row.role?.trim().toLowerCase() || "tech",
    };
    const { error } = await supabase.from("technicians").update(payload).eq("id", row.id);
    if (error) {
      console.error(error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");
      return;
    }
    await load();
  }

  async function addRow() {
    if (!newRow.name?.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ –∏–º—è");
      return;
    }
    const payload = {
      name: newRow.name.trim(),
      phone: newRow.phone?.trim() || null,
      email: newRow.email?.trim() || null,
      role: (newRow.role || "tech").toLowerCase().trim(),
    };
    const { error } = await supabase.from("technicians").insert(payload);
    if (error) {
      console.error(error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏");
      return;
    }
    setNewRow({ name: "", phone: "", email: "", role: "tech" });
    await load();
  }

  async function removeRow(id) {
    if (!window.confirm("–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?")) return;
    const { error } = await supabase.from("technicians").delete().eq("id", id);
    if (error) {
      console.error(error);
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
      return;
    }
    setItems(prev => prev.filter(r => r.id !== id));
  }

  // --- –í–´–ó–û–í Edge-—Ñ—É–Ω–∫—Ü–∏–∏ admin-create-user ---
  async function createAccount(row) {
    const email = (row.email || "").trim();
    if (!email) return alert("–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø—É—Å—Ç–æ–π Email");
    const password = prompt("–ó–∞–¥–∞–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):", "");
    if (!password) return;

    try {
      const url = `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/admin-create-user`;
      const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json", apikey: import.meta.env.VITE_SUPABASE_ANON_KEY },
        body: JSON.stringify({
          email,
          password,
          role: (row.role || "tech").toLowerCase(),
          technician_id: row.id,
        }),
      });

      const json = await res.json();
      if (!res.ok) throw new Error(json?.error || "–û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏");
      alert("–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω/–ø—Ä–∏–≤—è–∑–∞–Ω");
      await load();
    } catch (e) {
      console.error(e);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç: " + e.message);
    }
  }

  // --- –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è (Edge-—Ñ—É–Ω–∫—Ü–∏—è admin-reset-password) ---
  async function resetPassword(row) {
    if (!row.auth_user_id) return alert("–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –µ—â—ë –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞");
    const newPass = prompt("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:", "");
    if (!newPass) return;
    try {
      const url = `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/admin-reset-password`;
      const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json", apikey: import.meta.env.VITE_SUPABASE_ANON_KEY },
        body: JSON.stringify({ user_id: row.auth_user_id, new_password: newPass }),
      });
      const json = await res.json();
      if (!res.ok) throw new Error(json?.error || "–û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏");
      alert("–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω");
    } catch (e) {
      console.error(e);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å: " + e.message);
    }
  }

  if (authLoading) return <div className="p-4">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>;
  if (role !== "admin") return <div className="p-6">–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.</div>;

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</h1>

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      <div style={{ display: "grid", gridTemplateColumns: "2fr 1.3fr 2fr 1.2fr auto", gap: 8, marginBottom: 12 }}>
        <input style={inputStyle} placeholder="–ò–º—è" value={newRow.name}
               onChange={e => setNewRow({ ...newRow, name: e.target.value })} />
        <input style={inputStyle} placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" value={newRow.phone}
               onChange={e => setNewRow({ ...newRow, phone: e.target.value })} />
        <input style={inputStyle} placeholder="Email" value={newRow.email}
               onChange={e => setNewRow({ ...newRow, email: e.target.value })} />
        <select style={inputStyle} value={newRow.role}
                onChange={e => setNewRow({ ...newRow, role: e.target.value })}>
          {roleOptions.map(o => <option key={o.value} value={o.value}>{o.label}</option>)}
        </select>
        <button onClick={addRow} style={{ padding: "6px 12px" }}>‚ûï –î–æ–±–∞–≤–∏—Ç—å</button>
      </div>

      <div className="overflow-x-auto">
        <table style={{ width: "100%", borderCollapse: "collapse" }}>
          <thead style={{ background: "#f8fafc" }}>
            <tr>
              <th style={th} width="40">#</th>
              <th style={th}>–ò–º—è</th>
              <th style={th} width="180">–¢–µ–ª–µ—Ñ–æ–Ω</th>
              <th style={th} width="260">Email</th>
              <th style={th} width="160">–î–æ–ª–∂–Ω–æ—Å—Ç—å</th>
              <th style={{ ...th, textAlign: "center" }} width="340">–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {loading && <tr><td style={td} colSpan={6}>–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</td></tr>}
            {!loading && items.length === 0 && <tr><td style={td} colSpan={6}>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</td></tr>}
            {items.map((row, idx) => (
              <tr key={row.id}>
                <td style={td}>{idx + 1}</td>
                <td style={td}>
                  <input style={inputStyle} value={row.name || ""}
                         onChange={e => onChangeCell(row.id, "name", e.target.value)} />
                </td>
                <td style={td}>
                  <input style={inputStyle} value={row.phone || ""}
                         onChange={e => onChangeCell(row.id, "phone", e.target.value)} />
                </td>
                <td style={td}>
                  <input style={inputStyle} value={row.email || ""}
                         onChange={e => onChangeCell(row.id, "email", e.target.value)} />
                </td>
                <td style={td}>
                  <select style={inputStyle}
                          value={(row.role || "tech").toLowerCase()}
                          onChange={e => onChangeCell(row.id, "role", e.target.value)}>
                    {roleOptions.map(o => <option key={o.value} value={o.value}>{o.label}</option>)}
                  </select>
                </td>
                <td style={{ ...td, textAlign: "center", whiteSpace: "nowrap" }}>
                  <button title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" onClick={() => saveRow(row)} style={{ marginRight: 8 }}>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                  <button title="–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç" onClick={() => createAccount(row)} style={{ marginRight: 8 }}>
                    üë§ –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                  </button>
                  <button title="–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å" onClick={() => resetPassword(row)} style={{ marginRight: 8 }}>
                    üîë –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
                  </button>
                  <button title="–£–¥–∞–ª–∏—Ç—å" onClick={() => removeRow(row.id)}>üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                  {row.auth_user_id && <span style={{ marginLeft: 10, opacity: 0.6 }}>UID: {row.auth_user_id.slice(0, 8)}‚Ä¶</span>}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
